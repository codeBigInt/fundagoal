pragma language_version >= 0.16.0;

import CompactStandardLibrary;
import CustomLibrary;

export {Campaign, CampaignStatus, CoinInfo, QualifiedCoinInfo};

enum CampaignStatus {active, withdrawn, closed};

/* Mapping to keep track of  dynamic coin input into the smart contract */
export ledger protocolTVL: Map<Bytes<32>, QualifiedCoinInfo>;
export ledger campaigns: Map<Bytes<32>, Campaign>;
export ledger backers: MerkleTree<10, Bytes<32>>;


struct Campaign {
    id: Bytes<32>;
    title: Opaque<"string">;
    desc: Opaque<"string">;
    owner: Bytes<32>;
    fundGoal: Uint<128>;
    raised: Uint<128>;
    contributors: Uint<128>;
    duration: Uint<128>;
    creationDate: Uint<128>;
    status: CampaignStatus;
    coinType: Bytes<32>;
};


witness local_secrete_key(): Bytes<32>;
/* @confirm_campaign_expiry --> Checks to see if a campaign is expired or still valid */
witness confirm_campaign_expiration(duration: Uint<128>, startDate: Uint<128>): Boolean;
witness findBacker(commitment: Bytes<32>): MerkleTreePath<10, Bytes<32>>;


/* INTERACTION FOR CAMPAIGN CREATION AND MANAGEMENT */

/* Allows creation of new campaigns */
export circuit createCampaign(
    _campaignId: Bytes<32>,
    _fundGoal: Uint<128>,
    _duration: Uint<128>,
    _coinType: Bytes<32>,
    _currentDate: Uint<128>,
    _title: Opaque<"string">,
    _desc: Opaque<"string">
): []  {
    const disclosedId = disclose(_campaignId); 
    assert (!campaigns.member(disclosedId), "Campaign with same ID already exists");
    const ownersHash = generateOwnersPK(ownPublicKey().bytes, disclose(local_secrete_key()), disclosedId);
    const newCampaign = Campaign{   
        ...default<Campaign>,
        title: disclose(_title),
        desc: disclose(_desc),
        status: CampaignStatus.active,
        fundGoal: disclose(_fundGoal),
        duration: disclose(_duration),
        owner: ownersHash,
        coinType: disclose(_coinType),
        creationDate: disclose(_currentDate)
    };
    
    campaigns.insert(disclosedId, newCampaign);
}

export circuit cancelCampaign(_campaignId: Bytes<32>): []  {
    const disclosedId = disclose(_campaignId); 
    
    assert (campaigns.member(disclosedId), "Campaign with specified ID does not exist");
    const campaignToEnd = campaigns.lookup(disclosedId);
    const reconstructedOwnersHash = generateOwnersPK(ownPublicKey().bytes, disclose(local_secrete_key()), disclosedId);

    assert (reconstructedOwnersHash == campaignToEnd.owner, "Can not end this campaign: You are not the owner");
    // Removes the campaign from the list
    campaigns.remove(disclosedId);
}

export circuit withdrawCampaignFunds(_campaignId: Bytes<32>): []{
    const disclosedId = disclose(_campaignId); 
    assert (campaigns.member(disclosedId), "Campaign with the specified ID does not exist");
    
    const campaignToWithdrawFrom = campaigns.lookup(disclosedId);
    const reconstructedOwnersHash = generateOwnersPK(ownPublicKey().bytes, disclose(local_secrete_key()), disclosedId);

    assert (reconstructedOwnersHash == campaignToWithdrawFrom.owner, "Can not end this campaign: You are not the owner");
    assert (campaignToWithdrawFrom.raised >= campaignToWithdrawFrom.fundGoal || campaignToWithdrawFrom.status == CampaignStatus.closed, "Campaign funds is less than the fund goal");

    const sendResult = send(
        protocolTVL.lookup(campaignToWithdrawFrom.coinType), 
        left<ZswapCoinPublicKey, ContractAddress>(ownPublicKey()),
        campaignToWithdrawFrom.fundGoal
    );

    sendResult.change.is_some ? 
    protocolTVL.insertCoin(campaignToWithdrawFrom.coinType, sendResult.change.value, left<ZswapCoinPublicKey, ContractAddress>(ownPublicKey())) :
    protocolTVL.remove(campaignToWithdrawFrom.coinType);

    // Update list of campaigns
    campaigns.remove(disclosedId);

    const updatedCampaign = Campaign{
        ...campaignToWithdrawFrom,
        status: CampaignStatus.withdrawn
    };

    campaigns.insert(disclosedId, updatedCampaign);
}


export circuit endCampaign(_campaignId: Bytes<32>): []  {
    const disclosedId = disclose(_campaignId); 
    
    assert (campaigns.member(disclosedId), "Campaign with specified ID does not exist");
    const campaignToEnd = campaigns.lookup(disclosedId);
    const reconstructedOwnersHash = generateOwnersPK(ownPublicKey().bytes, disclose(local_secrete_key()), disclosedId);

    assert (reconstructedOwnersHash == campaignToEnd.owner, "Can not end this campaign: You are not the owner");
    // Removes the campaign from the list
    campaigns.insert(disclosedId, Campaign{
        ...campaignToEnd,
        status: CampaignStatus.closed
    });
}   

export circuit updateCampaign(
    _campaignId: Bytes<32>,
    fundGoal: Uint<128>,
    duration: Uint<128>
    ): []{
    const disclosedId = disclose(_campaignId); 
    assert (campaigns.member(disclosedId), "Campaign with the specified ID does not exist");
    
    const campaignToUpdate = campaigns.lookup(disclosedId);
    const reconstructedOwnersHash = generateOwnersPK(ownPublicKey().bytes, disclose(local_secrete_key()), disclosedId);

    assert (reconstructedOwnersHash == campaignToUpdate.owner, "Can not end this campaign: You are not the owner");

    const updatedCampaign = Campaign{   
        ...campaignToUpdate,
        fundGoal: disclose(fundGoal),
        duration: disclose(duration),
    };
    
    campaigns.insert(disclosedId, updatedCampaign);
}


/* INTERACTIONS FOR BACKERS OR CAMPAIGN CONTRIBUTORS */

export circuit fundCampaign(coin: CoinInfo, _campaignId: Bytes<32>): []{
    const disclosedCoin = disclose(coin);
    const disclosedId = disclose(_campaignId);
    assert (campaigns.member(disclosedId), "Campaign with the specified ID does not exist");
    const campaignToFund = campaigns.lookup(disclosedId);
    const isCampaignActive = confirm_campaign_expiration(campaignToFund.duration, campaignToFund.creationDate);
    assert (isCampaignActive, "Campaign with specified ID is no longer active");
    assert (coin.color == campaignToFund.coinType, "Insufficient funds provided");
    receive(disclosedCoin);

    const coinToInsert = protocolTVL.member(disclosedCoin.color) ? 
    mergeCoinImmediate(protocolTVL.lookup(disclosedCoin.color), disclosedCoin) :
    disclosedCoin;

    protocolTVL.insertCoin(
        disclosedCoin.color, 
        coinToInsert, 
        right<ZswapCoinPublicKey, ContractAddress>(kernel.self())
    );

    const backer = Backer{
        id: disclose(local_secrete_key()),
        contribution: disclosedCoin.value as Uint<32>
    };

    const backerCommit = generateCommit(backer, disclosedId);
    backers.insert(backerCommit);

    const updatedCampaign = Campaign{
        ...campaignToFund,
        contributors: (campaignToFund.contributors + 1) as Uint<128>,
        raised: (campaignToFund.raised + disclosedCoin.value) as Uint<128>
    };

    campaigns.insert(disclosedId, updatedCampaign);
}

export circuit requestRefund(_campaignId: Bytes<32>, refund_amount: Uint<32>, amountDeposited: Uint<32>): []{
    const disclosedId = disclose(_campaignId);

    assert (campaigns.member(disclosedId), "Campaign with the specified ID does not exist");
    const campaign = campaigns.lookup(disclosedId);

    const backer = Backer{
        id: disclose(local_secrete_key()),
        contribution: disclose(amountDeposited)
    };

    const backerCommit = generateCommit(backer, disclosedId);
    const path = disclose(findBacker(backerCommit));

    assert(backers.checkRoot(merkleTreePathRoot<10, Bytes<32>>(path)), "Not a valid backer");
    assert (refund_amount <= amountDeposited, "Can not withdraw more than deposited amount");
    const sendResult = send(
        protocolTVL.lookup(campaign.coinType), 
        left<ZswapCoinPublicKey, ContractAddress>(ownPublicKey()),
        disclose(refund_amount)
    );

    sendResult.change.is_some ? 
    protocolTVL.insertCoin(campaign.coinType, sendResult.change.value, left<ZswapCoinPublicKey, ContractAddress>(ownPublicKey())) :
    protocolTVL.remove(campaign.coinType);
}

